@inject IJSRuntime js
    <EditForm Model="Models"  @attributes="todoform" >
        @foreach (var item in Models)
        {
        <div class="d-flex align-items-center" style="flex-direction: row; margin-bottom: 20px;">
            <label class="toggleButton">
                <input type="checkbox" checked="@item.Completed" 
                       @onchange="async () => await Bind(item)" />
                <div>
                    <svg viewBox="0 0 44 44">
                        <path d="M14,24 L21,31 L39.7428882,11.5937758 C35.2809627,6.53125861 30.0333333,4 24,4 C12.95,4 4,12.95 4,24 C4,35.05 12.95,44 24,44 C35.05,44 44,35.05 44,24 C44,19.3 42.5809627,15.1645919 39.7428882,11.5937758" transform="translate(-2.000000, -2.000000)"></path>
                    </svg>
                </div>
            </label>
            <div class="todoContainer @(item.DateTime != default ? "helpCont" : string.Empty)">
                <div class="titleTodo">
                    <span>@item.Title</span>
                    <p class="subT">@item.SubTitle</p>
                </div>
                @if (item.DateTime != default)
                {
                    <div class="dateWrap">
                        <i class="fa fa-calendar"></i>
                        <div class="dateContainer">
                            <span>@item.DateTime.ToShortDateString()</span>
                            <p>@item.DateTime.ToShortTimeString()</p>
                        </div>
                    </div>
                }
            </div>
            @if (!item.Completed)
            {
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-pen" fill="currentColor" xmlns="http://www.w3.org/2000/svg"  @onclick="() => UpdateGlobalToDo(item.Id)">
                    <path fill-rule="evenodd" d="M5.707 13.707a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391L10.086 2.5a2 2 0 0 1 2.828 0l.586.586a2 2 0 0 1 0 2.828l-7.793 7.793zM3 11l7.793-7.793a1 1 0 0 1 1.414 0l.586.586a1 1 0 0 1 0 1.414L5 13l-3 1 1-3z" />
                    <path fill-rule="evenodd" d="M9.854 2.56a.5.5 0 0 0-.708 0L5.854 5.855a.5.5 0 0 1-.708-.708L8.44 1.854a1.5 1.5 0 0 1 2.122 0l.293.292a.5.5 0 0 1-.707.708l-.293-.293z" />
                    <path d="M13.293 1.207a1 1 0 0 1 1.414 0l.03.03a1 1 0 0 1 .03 1.383L13.5 4 12 2.5l1.293-1.293z" />
                </svg>
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-plus-square" fill="currentColor" xmlns="http://www.w3.org/2000/svg"  @onclick="async () => await AddToDo.InvokeAsync(item.Id)">
                    <path fill-rule="evenodd" d="M8 3.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H4a.5.5 0 0 1 0-1h3.5V4a.5.5 0 0 1 .5-.5z" />
                    <path fill-rule="evenodd" d="M7.5 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H8.5V12a.5.5 0 0 1-1 0V8z" />
                    <path fill-rule="evenodd" d="M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
                </svg>
            }
        </div>

            @foreach (var todo in item.ToDos)
            {
                <div class="d-flex align-items-center" style=" flex-direction: row; margin-bottom: 20px; padding-left: 13%;" >
                    <label class="toggleButton">
                        <input type="checkbox" checked="@todo.Completed" class="custom-checkbox" id="ToDo" name="ToDo"
                               @onchange="async () => await BindSubToDo(todo, item)" />
                        <div>
                            <svg viewBox="0 0 44 44">
                                <path d="M14,24 L21,31 L39.7428882,11.5937758 C35.2809627,6.53125861 30.0333333,4 24,4 C12.95,4 4,12.95 4,24 C4,35.05 12.95,44 24,44 C35.05,44 44,35.05 44,24 C44,19.3 42.5809627,15.1645919 39.7428882,11.5937758" transform="translate(-2.000000, -2.000000)"></path>
                            </svg>
                        </div>
                    </label>
                    <div class="titleTodo">
                        <span>@todo.Title</span>
                    </div>
                </div>
            }

        }
    </EditForm>

@code {
    [CascadingParameter]
    public IModalService blazorModal { get; set; }

    [Parameter]
    public IEnumerable<GlobalToDo> Models { get; set; }

    [Parameter]
    public EventCallback<ToDo> Save { get; set; }

    [Parameter]
    public EventCallback Update { get; set; }

    [Parameter]
    public EventCallback<string> AddToDo { get; set; }

    [Inject]
    internal IToDoListService service { get; set; }

    private Dictionary<string, object> todoform =
      new Dictionary<string, object>
     {
        { "class", "editFormTodo"},
     };

    public async Task UpdateGlobalToDo(string Id)
    {
        var param = new ModalParameters();

        var updObj = Models.FirstOrDefault(i => i.Id == Id);

        param.Add("upToDo", updObj);

        param.Add("CallbackUpdateToDo", EventCallback.Factory.Create(this, CallBackUpdate));

        var modal = blazorModal.Show<UpdateGlobalToDoModal>("Update task", param);

        await InvokeAsync(StateHasChanged);
    }

    public async Task CallBackUpdate()
    {
        await js.WriteLocalStorage(service.Get());
    }

    private async Task BindSubToDo(ToDo item, GlobalToDo parent)
    {
        await Task.Delay(600);
        item.Completed = !item.Completed;

        var notCompleted = parent.ToDos.Where(i => !i.Completed).Count();

        if(notCompleted == 0)
        {
            parent.Completed = true;
        }

        await Save.InvokeAsync(null);
    }

    public async Task Bind(GlobalToDo item)
    {
        await Task.Delay(600);
        item.Completed = !item.Completed;

        await Save.InvokeAsync(null);
    }

}
